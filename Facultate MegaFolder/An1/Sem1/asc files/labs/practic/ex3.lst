     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  global start        
     4                                  
     5                                  
     6                                  extern exit, scanf, fopen, fclose               
     7                                  import exit msvcrt.dll 
     8                                  import scanf msvcrt.dll 
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll     
    11                                  
    12                                  segment data use32 class=data
    13 00000000 2573256E00                  file_name_format db "%s%n", 0
    14 00000005 00000000                    len dd 0
    15 00000009 6100                        acces_mode db "a", 0 
    16 0000000B 00                          file_name db 0
    17 0000000C FFFFFFFF                    file_descriptor dd -1
    18                                      new_file_name resb 0
    19                                  
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 68[05000000]                    push len
    23 00000005 68[0B000000]                    push file_name
    24 0000000A 68[00000000]                    push file_name_format
    25 0000000F FF15[00000000]                  call [scanf]
    26 00000015 83C40C                          add esp, 4 * 3
    27                                          
    28 00000018 68[09000000]                    push dword acces_mode
    29 0000001D 68[0B000000]                    push dword file_name
    30 00000022 FF15[00000000]                  call [fopen]
    31 00000028 83C408                          add esp, 4 * 2
    32                                          
    33 0000002B A3[0C000000]                    mov [file_descriptor], eax
    34                                          
    35 00000030 83F800                          cmp eax, 0
    36 00000033 7438                            je ending
    37                                          
    38 00000035 B8[0B000000]                    mov eax, file_name
    39                                          
    40                                          find_end:
    41 0000003A 83F800                              cmp eax, 0
    42 0000003D 7401                                je finish
    43 0000003F 40                                  inc dword eax
    44                                          finish:
    45 00000040 48                              dec dword eax
    46                                          
    47 00000041 BE[0B000000]                    mov esi, file_name
    48 00000046 8B1D[05000000]                  mov ebx, [len]
    49 0000004C B900000000                      mov ecx, 0
    50                                          start_loop1:
    51 00000051 8A06                                mov al, [esi]
    52 00000053 3C00                                cmp al, 0
    53 00000055 7416                                je start_loop2
    54                                              
    55 00000057 3C41                                cmp AL, 'A'
    56 00000059 7C04                                jl not_capital
    57                                              
    58 0000005B 3C5A                                cmp AL, 'Z' ; we skip letters > Z
    59 0000005D 7F00                                jg not_capital
    60                                              
    61                                              not_capital:
    62 0000005F 46                                      inc esi
    63 00000060 EBEF                                    jmp start_loop1
    64                                              
    65 00000062 8899[10000000]                      mov [new_file_name + ecx], BL ; if it's a capital letter we store it in new_file_name
    66 00000068 46                                  inc esi
    67 00000069 4B                                  dec dword ebx
    68 0000006A 41                                  inc ecx
    69 0000006B EBE4                                jmp start_loop1
    70                                              
    71                                          start_loop2:
    72                                          ending:
    73 0000006D FF35[0C000000]                  push dword [file_descriptor]
    74 00000073 FF15[00000000]                  call [fclose]
    75 00000079 83C404                          add esp, 4
    76                                          
    77 0000007C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    78 0000007E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
