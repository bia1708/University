     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               
     8                                  import exit msvcrt.dll    
     9                                  
    10                                  ; our data is declared here 
    11                                  segment data use32 class=data
    12 00000000 0201FD03FC0206              A db 2, 1, -3, 3, -4, 2, 6
    13                                      la equ $-A
    14 00000007 040507060201                B db 4, 5, 7, 6, 2, 1
    15                                      lb equ $-B
    16 0000000D 00<rept>                    R times la+lb db 0
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; Two byte strings A and B are given. Obtain the string R by concatenating the elements of B in reverse order and the negative elements of A.
    22                                          ;Example:
    23                                          ;A: 2, 1, -3, 3, -4, 2, 6
    24                                          ;B: 4, 5, 7, 6, 2, 1
    25                                          ;R: 1, 2, 6, 7, 5, 4, -3, -4
    26 00000000 B906000000                      mov ECX, lb
    27 00000005 BE00000000                      mov esi, 0
    28 0000000A E30F                            jecxz ending
    29                                          start_loop1:
    30 0000000C 8A81[06000000]                      mov AL, [B + ECX - 1]
    31 00000012 8886[0D000000]                      mov [R + esi], AL
    32 00000018 46                                  inc esi
    33 00000019 E2F1                            loop start_loop1
    34                                          ending:
    35                                          
    36 0000001B B907000000                      mov ECX, la
    37 00000020 BF00000000                      mov edi, 0
    38 00000025 E314                            jecxz ending2
    39                                          start_loop2:
    40 00000027 8A87[00000000]                      mov AL, [A + edi]
    41 0000002D 3C00                                cmp AL, 0
    42 0000002F 7D07                                jge lower_than_zero
    43 00000031 8886[0D000000]                          mov [R + esi], AL
    44 00000037 46                                      inc esi
    45                                              lower_than_zero:
    46 00000038 47                                  inc edi
    47 00000039 E2EC                            loop start_loop2
    48                                          ending2:
    49                                          ; exit(0)
    50 0000003B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 0000003D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
