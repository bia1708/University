     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit               
     6                                  import exit msvcrt.dll    
     7                                  
     8                                  segment data use32 class=data
     9 00000000 0102030405060708            S db 1, 2, 3, 4, 5, 6, 7, 8
    10                                      l equ $-S
    11 00000008 00<rept>                    D times l db 0
    12                                      
    13                                  ; our code starts here
    14                                  segment code use32 class=code
    15                                      start:
    16                                          ; A byte string S is given. Obtain the string D by concatenating the elements found on the even positions of S and then the elements found on the odd positions of S.
    17                                          ; S: 1, 2, 3, 4, 5, 6, 7, 8
    18                                          ; D: 1, 3, 5, 7, 2, 4, 6, 8
    19 00000000 B908000000                      mov ECX, l
    20 00000005 BE00000000                      mov esi, 0
    21 0000000A BF00000000                      mov edi, 0
    22 0000000F E317                            jecxz ending1
    23                                          start_loop1: 
    24 00000011 8A86[00000000]                      mov AL, [S + esi]
    25 00000017 8887[08000000]                      mov [D + edi], AL
    26 0000001D 83C701                              add edi, 1
    27 00000020 83C602                              add esi, 2
    28 00000023 83E901                              sub ECX, 1
    29 00000026 E2E9                            loop start_loop1
    30                                          ending1:
    31                                          
    32 00000028 B908000000                      mov ECX, l
    33 0000002D BE01000000                      mov esi, 1
    34 00000032 E317                            jecxz ending2
    35                                          start_loop2:
    36 00000034 8A86[00000000]                      mov AL, [S + esi]
    37 0000003A 8887[08000000]                      mov [D + edi], AL
    38 00000040 83C701                              add edi, 1
    39 00000043 83C602                              add esi, 2
    40 00000046 83E901                              sub ECX, 1
    41 00000049 E2E9                            loop start_loop2
    42                                          ending2:
    43                                          
    44                                          ; exit(0)
    45 0000004B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    46 0000004D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
