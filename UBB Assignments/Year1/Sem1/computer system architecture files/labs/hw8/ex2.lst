     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit, fopen, fread, fclose, printf               
     6                                  import exit msvcrt.dll
     7                                  import fopen msvcrt.dll
     8                                  import fread msvcrt.dll
     9                                  import fclose msvcrt.dll
    10                                  import printf msvcrt.dll    
    11                                  
    12                                  segment data use32 class=data
    13 00000000 6E756D626572732E74-         file_name db "numbers.txt", 0
    13 00000009 787400             
    14 0000000C 7200                        access_mode db "r", 0 
    15 0000000E FFFFFFFF                    file_descriptor dd -1 
    16                                      
    17                                      len equ 100         
    18 00000012 0000                        len_numbers dw 0
    19 00000014 00<rept>                    numbers times (len+1) db 0
    20 00000079 303132333435363738-         digits db '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 0
    20 00000082 3900               
    21 00000084 00                          max_freq db 0
    22 00000085 00                          max_digit db 0
    23 00000086 00                          count db 0
    24 00000087 546865206469676974-         format db "The digit with the highest frequency(%d) is %c", 0 
    24 00000090 207769746820746865-
    24 00000099 206869676865737420-
    24 000000A2 6672657175656E6379-
    24 000000AB 282564292069732025-
    24 000000B4 6300               
    25                                  
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; A text file is given. Read the content of the file, determine the digit with the highest frequency and display the digit along with its frequency on the screen. The name of text file is defined in the data
    29                                          
    30                                          ; first we have to open the file
    31 00000000 68[0C000000]                    push dword access_mode     
    32 00000005 68[00000000]                    push dword file_name
    33 0000000A FF15[00000000]                  call [fopen]
    34 00000010 83C408                          add esp, 4*2  
    35                                  
    36 00000013 A3[0E000000]                    mov [file_descriptor], eax
    37 00000018 83F800                          cmp eax, 0 ; we check to see if the file was opened correctly
    38 0000001B 0F8497000000                    je ending
    39                                          
    40                                          ; now we read the numbers from the file
    41 00000021 FF35[0E000000]                  push dword [file_descriptor]
    42 00000027 6A64                            push dword len
    43 00000029 6A01                            push dword 1
    44 0000002B 68[14000000]                    push dword numbers       
    45 00000030 FF15[00000000]                  call [fread]
    46 00000036 83C410                          add esp, 4*4
    47 00000039 A3[12000000]                    mov [len_numbers], word eax
    47          ******************       warning: register size specification ignored
    48 0000003E 66FF05[12000000]                inc word[len_numbers]
    49                                          
    50                                          ; in numbers we have the array of chars
    51 00000045 BE[79000000]                    mov esi, digits
    52 0000004A FC                              cld 
    53                                          ;mov ebx, 0
    54                                          loop1:
    55 0000004B BF[14000000]                        mov edi, numbers
    56 00000050 AC                                  lodsb
    57 00000051 3C00                                cmp  al, 0
    58 00000053 7436                                je ending2
    59                                              
    60 00000055 8B0D[12000000]                      mov ecx, [len_numbers]
    61 0000005B C605[86000000]00                    mov byte[count], 0
    62                                              
    63                                              loop2:
    64 00000062 AE                                  scasb
    65 00000063 7506                                jne not_found
    66 00000065 FE05[86000000]                          inc byte [count]
    67                                              not_found:
    68 0000006B 49                                  dec ecx
    69 0000006C 75F4                                jnz loop2
    70                                              
    71 0000006E 8A15[86000000]                      mov dl, [count]
    72 00000074 8A1D[84000000]                      mov bl, [max_freq]
    73 0000007A 38DA                                cmp dl, bl
    74 0000007C 7C0B                                jl not_greater
    75 0000007E 8815[84000000]                          mov [max_freq], byte dl
    76 00000084 A2[85000000]                            mov [max_digit], byte al 
    77                                              not_greater:
    78 00000089 EBC0                            jmp loop1
    79                                          ending2:
    80                                          
    81                                          ;here we print the message
    82 0000008B 0FB605[84000000]                movzx eax, byte [max_freq]
    83 00000092 0FB61D[85000000]                movzx ebx, byte [max_digit]
    84 00000099 53                              push dword ebx
    85 0000009A 50                              push dword eax
    86 0000009B 68[87000000]                    push dword format
    87 000000A0 FF15[00000000]                  call [printf]
    88 000000A6 83C410                          add esp, 4 * 4
    89                                          
    90                                          ; now we close the file
    91 000000A9 FF35[0E000000]                  push dword [file_descriptor]
    92 000000AF FF15[00000000]                  call [fclose]
    93 000000B5 83C404                          add esp, 4
    94                                          ending:
    95                                          ; exit(0)
    96 000000B8 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    97 000000BA FF15[00000000]                  call    [exit]       ; call exit to terminate the program
