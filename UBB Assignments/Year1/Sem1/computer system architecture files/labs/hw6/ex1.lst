     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit               
     6                                  import exit msvcrt.dll    
     7                                  
     8                                  segment data use32 class=data
     9                                      ; s: -22, 145, -48, 127 <=> 1111_1111_1110_1010, 0000_0000_1001_0001, 1111_1111_1101_0000, 0000_0000_0111_1111
    10 00000000 EAFF9100D0FF7F00            s dw -22, 145, -48, 127
    11                                      ls equ ($-s) / 2
    12 00000008 0000<rept>                  d times ls dw 0 ; should be : 3, 3, 5, 7
    13                                  
    14                                  segment code use32 class=code
    15                                      start:
    16                                          ; A word string s is given. Build the byte string d such that each element d[i] contains:
    17                                              ;- the count of zeros in the word s[i], if s[i] is a negative number
    18                                              ;- the count of ones in the word s[i], if s[i] is a positive number
    19 00000000 BE[00000000]                    mov esi, s
    20 00000005 BF00000000                      mov edi, 0
    21 0000000A FC                              cld
    22 0000000B B904000000                      mov ecx, ls
    23                                          loop1:
    24 00000010 66AD                                lodsw
    25 00000012 51                                  push ECX ; I will need ECX for this loop so I'll just push it on the stack and then use it at the end
    26 00000013 B910000000                          mov ECX, 16
    27 00000018 66BB0000                            mov BX, 0 ; this will hold number of 1s
    28 0000001C 6683F800                            cmp AX, 0
    29 00000020 7F1C                                jg count_of_zeroes ;  this will be executed for numbers lower than 0
    30                                                  loop2:
    31 00000022 F8                                          clc
    32 00000023 6689C2                                      mov DX, AX
    33 00000026 66D1EA                                      shr DX, 1
    34 00000029 6683D300                                    adc BX, 0 ; this will add all the 1s obtained in the CF by doing the shr
    35 0000002D E2F3                                    loop loop2
    36 0000002F 66BA1000                                mov DX, 16
    37 00000033 6629DA                                  sub DX, BX ; this will get me the number of 0s
    38 00000036 66899F[08000000]                        mov [d + edi], BX
    39 0000003D 47                                      inc edi
    40                                              count_of_zeroes:
    41 0000003E B910000000                          mov ECX, 16
    42                                              ; this next part gets executed for positive numbers
    43 00000043 7C15                                jl count_of_ones
    44                                                  loop3:
    45 00000045 F8                                          clc
    46 00000046 6689C2                                      mov DX, AX
    47 00000049 66D1EA                                      shr DX, 1
    48 0000004C 6683D300                                    adc BX, 0 ; this will add all the 1s obtained in the CF by doing the shr
    49 00000050 E2F3                                    loop loop3
    50 00000052 66899F[08000000]                        mov [d + edi], BX
    51 00000059 47                                      inc edi
    52                                              count_of_ones:
    53 0000005A 59                                  pop ECX ; I'm getting back ECX
    54 0000005B E2B3                            loop loop1
    55                                          ; exit(0)
    56 0000005D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    57 0000005F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
